{"version":3,"file":"static/js/878.ac797110.chunk.js","mappings":"oLAAe,SAASA,IAEpB,OAAO,wC,0MCAEC,EAAiB,mCAAG,oGACNC,IAAAA,IAAU,4FADJ,cACvBC,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,qDAKjBC,EAAQ,mCAAG,WAAOC,GAAP,uFACGJ,IAAAA,IAAA,6CAAgDI,EAAhD,8CADH,cACdH,EADc,yBAEbA,EAASC,MAFI,2CAAH,sDAKRG,EAAiB,mCAAG,WAAOC,GAAP,uFACNN,IAAAA,IAAA,oGAAuGM,IADjG,cACvBL,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,sDAKjBK,EAAY,mCAAG,WAAOH,GAAP,uFACDJ,IAAAA,IAAA,6CAAgDI,EAAhD,sDADC,cAClBH,EADkB,yBAEjBA,EAASC,MAFQ,2CAAH,sDAKZM,EAAe,mCAAG,WAAOJ,GAAP,uFACJJ,IAAAA,IAAA,6CAAgDI,EAAhD,sDADI,cACrBH,EADqB,yBAEpBA,EAASC,MAFW,2CAAH,uD,kJCnBb,SAASO,EAAT,GAAsC,IAAZC,EAAW,EAAXA,SAErC,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOL,EAAP,KAAqBM,EAArB,KAkBA,OACI,6BACI,kBAAOC,KAAK,OAAOC,SAlBN,SAAAC,GACjBH,EAAgBG,EAAMC,OAAOC,WAkBzB,mBAAQJ,KAAK,SAASK,QAdT,SAAAH,GACjBA,EAAMI,iBAEsB,KAAxBb,EAAac,OAKjBV,EAASJ,GAJLe,MAAM,2BAUN,uB,wBCpBG,SAASC,IAEpB,IAAMC,GAAWC,EAAAA,EAAAA,MAGjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAqBC,GAArB,WAEA,GAA4Bf,EAAAA,EAAAA,UAAS,IAArC,eAAOgB,EAAP,KAAeC,EAAf,KACA,GAA4BjB,EAAAA,EAAAA,UAAS,IAArC,eAAOkB,EAAP,KAAeC,EAAf,KACA,GAA8BnB,EAAAA,EAAAA,WAAS,GAAvC,eAAOoB,EAAP,KAAgBC,EAAhB,KACA,GAA0BrB,EAAAA,EAAAA,UAAS,MAAnC,eAAOsB,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WAAM,wCAMZ,2FACIH,GAAW,GADf,mBAG6B3B,EAAAA,EAAAA,IAAkBsB,GAH/C,OAGcE,EAHd,OAIQC,EAAUD,EAAOO,SAJzB,gDAMQF,EAAS,EAAD,IANhB,yBAQQF,GAAW,GARnB,6EANY,sBAERL,GAFQ,mCAkBZU,KAEC,CAACV,IAON,OACI,2BACKI,IAAW,SAACjC,EAAA,EAAD,IACXmC,IAAS,8CAAsBA,EAAMK,YACtC,SAAC7B,EAAD,CAAiBC,SATA,SAACJ,GACtBsB,EAAUtB,GACVoB,EAAgB,SAAD,OAAUpB,OAQpBuB,IACG,wBACKA,EAAOU,KAAI,SAAAC,GAAK,OAAI,yBAAmB,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMrB,GAAhD,SAA6DiB,EAAMK,SAA7EL,EAAME","sources":["components/Loader.jsx","services/moviesApi.js","components/MovieSearchForm/MovieSearchForm.jsx","views/MoviesView.jsx"],"sourcesContent":["export default function Loader() {\n\n    return <p>Loading...</p>\n}","import axios from 'axios';\n\nexport const getTrendingMovies = async () => {\n    const response = await axios.get('https://api.themoviedb.org/3/trending/movie/day?api_key=92f9c720cb77c75804e80b01c8601d54')\n    return response.data\n}\n\nexport const getMovie = async (movieId) => {\n    const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}?api_key=92f9c720cb77c75804e80b01c8601d54`)\n    return response.data\n}\n\nexport const getMovieByKeyword = async (searchString) => {\n    const response = await axios.get(`https://api.themoviedb.org/3/search/movie/?api_key=92f9c720cb77c75804e80b01c8601d54&query=${searchString}`)\n    return response.data\n}\n\nexport const getMovieCast = async (movieId) => {\n    const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=92f9c720cb77c75804e80b01c8601d54`)\n    return response.data\n}\n\nexport const getMovieReviews = async (movieId) => {\n    const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=92f9c720cb77c75804e80b01c8601d54`)\n    return response.data\n}\n\n","import { useState } from \"react\";\nimport PropTypes from 'prop-types'\n\nexport default function MovieSearchForm({onSubmit}) {\n\n    const [searchString, setSearchString] = useState('')\n\n    const handleChange = event => {\n        setSearchString(event.target.value)\n    }\n\n\n    const handleSubmit = event => {\n        event.preventDefault();\n\n        if (searchString.trim() === '') {\n            alert('input string to search');\n            return;\n        }\n\n        onSubmit(searchString);\n    }\n\n    return(\n        <form>\n            <input type=\"text\" onChange={handleChange}></input>\n            <button type=\"submit\" onClick={handleSubmit}>Search</button>\n        </form>\n    )\n}\n\nMovieSearchForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired\n};","import { useState, useEffect } from 'react';\nimport { useLocation, Link, useSearchParams} from 'react-router-dom';\nimport MovieSearchForm from 'components/MovieSearchForm/MovieSearchForm'\nimport { getMovieByKeyword } from '../services/moviesApi.js'\nimport Loader from 'components/Loader'\n\nexport default function MoviesView() {\n\n    const location = useLocation();\n\n    // eslint-disable-next-line\n    const [searchParams, setSearchParams] = useSearchParams();\n\n    const [filter, setFilter] = useState('')\n    const [movies, setMovies] = useState([])\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n\n        if(!filter) {\n            return\n        }\n\n        async function fetchMovies() {\n            setLoading(true);\n            try {\n                const movies = await getMovieByKeyword(filter);\n                setMovies(movies.results)\n            } catch (error) {\n                setError(error)\n            } finally {\n                setLoading(false)\n            }\n        }\n\n        fetchMovies();\n\n      }, [filter]);\n\n    const handleFormSubmit = (searchString) => {\n        setFilter(searchString)\n        setSearchParams(`query=${searchString}`);\n    }\n\n    return(\n        <div>\n            {loading && <Loader />}\n            {error && <p>An error occured: {error.message}</p>}\n            <MovieSearchForm onSubmit={handleFormSubmit}/>\n            {movies && \n                <ul>\n                    {movies.map(movie => <li key={movie.id}><Link to={`/movies/${movie.id}`} state={{ from: location }}>{movie.title}</Link></li>)}\n                </ul>\n            }\n        </div>\n    ) \n}"],"names":["Loader","getTrendingMovies","axios","response","data","getMovie","movieId","getMovieByKeyword","searchString","getMovieCast","getMovieReviews","MovieSearchForm","onSubmit","useState","setSearchString","type","onChange","event","target","value","onClick","preventDefault","trim","alert","MoviesView","location","useLocation","useSearchParams","setSearchParams","filter","setFilter","movies","setMovies","loading","setLoading","error","setError","useEffect","results","fetchMovies","message","map","movie","to","id","state","from","title"],"sourceRoot":""}